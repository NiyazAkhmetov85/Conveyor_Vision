import streamlit as st
import cv2
import yt_dlp
import numpy as np
from PIL import Image
from ultralytics import YOLO

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO (—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏)
MODEL_PATH = "C:/ConveyorVision/runs/detect/train5/weights/best.pt"
model = YOLO(MODEL_PATH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å YouTube
def process_video_stream(video_url, frame_skip):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å YouTube, –∏–∑–≤–ª–µ–∫–∞—è –∫–∞–¥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–≥–æ–º."""
    ydl_opts = {
        'format': 'best',
        'quiet': True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(video_url, download=False)
        video_url = info_dict.get("url", None)

    cap = cv2.VideoCapture(video_url)
    frames = []
    count = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–≥–æ–º
        if count % frame_skip == 0:
            frames.append(frame)

        count += 1

    cap.release()
    return frames

# –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
def detect_objects(image, threshold, classes):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YOLO –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–ª–∞—Å—Å–æ–≤."""
    results = model(image)
    filtered_results = []
    for result in results:
        filtered_boxes = [box for box in result.boxes if box.conf[0].item() >= threshold and int(box.cls[0].item()) in classes]
        result.boxes = filtered_boxes
        filtered_results.append(result)
    return filtered_results

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def draw_results(image, results):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    img = np.array(image)
    damage_detected = False
    
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = box.conf[0].item()
            cls = int(box.cls[0].item())
            label = f"{model.names[cls]}: {conf:.2f}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
            if cls == 0:  # "Bad" (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ)
                color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π
                damage_detected = True
            else:  # "Good" (–Ω–æ—Ä–º–∞)
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π

            cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
            cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    
    return img, damage_detected

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.set_page_config(page_title="Conveyor Vision", layout="centered")
st.markdown("<h1 style='text-align: center;'>Conveyor Vision</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center;'>–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–Ω–æ–π –ª–µ–Ω—Ç–µ</h3>", unsafe_allow_html=True)

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube
youtube_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube:")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
frame_skip = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):", min_value=1, value=10, step=1)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ"):
    if youtube_url:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ..."):
            frames = process_video_stream(youtube_url, frame_skip)
            st.success("–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
            st.write("**–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã:**")
            for idx, frame in enumerate(frames):
                st.image(frame, caption=f"–ö–∞–¥—Ä {idx}", use_container_width=True)
            
            st.session_state.frames = frames  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    else:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é"):
    if "frames" in st.session_state:
        with st.spinner("–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏..."):
            detection_threshold = 0.5  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏
            selected_classes = [0]  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å "bad"
            for frame in st.session_state.frames:
                results = detect_objects(frame, detection_threshold, selected_classes)
                output_img, damage_detected = draw_results(frame, results)
                
                if damage_detected:
                    st.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –ª–µ–Ω—Ç—ã", icon="üö®")
                    st.image(output_img, caption="–ö–∞–¥—Ä —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ–º", use_container_width=True)
                    break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏
            else:
                st.success("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    else:
        st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–∏–¥–µ–æ.")

# –î–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ–∑–∂–µ
