import streamlit as st
import cv2
import numpy as np
from ultralytics import YOLO
from PIL import Image
from model_information import ModelInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(page_title="Conveyor Vision", layout="centered")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
MODEL_PATH = "C:/ConveyorVision/runs/detect/train5/weights/best.pt"
model = YOLO(MODEL_PATH)

# –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏
def detect_objects(image):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YOLO –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    results = model(image)
    return results

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def draw_results(image, results):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    img = np.array(image)
    damage_detected = False
    
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = box.conf[0].item()
            cls = int(box.cls[0].item())
            label = f"{model.names[cls]}: {conf:.2f}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
            if cls == 0:  # "Bad" (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ)
                color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π
                damage_detected = True
            else:  # "Good" (–Ω–æ—Ä–º–∞)
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π

            cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
            cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    
    return img, damage_detected

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("<h1 style='text-align: center;'> Conveyor Vision</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center;'>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫–æ–Ω–≤–µ–π–µ—Ä–Ω–æ–π –ª–µ–Ω—Ç—ã</h3>", unsafe_allow_html=True)

# –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("üîπ **–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**", type=["jpg", "png", "jpeg"])

if uploaded_file:
    image = Image.open(uploaded_file)
    st.image(image, caption="üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é"):
        with st.spinner("‚è≥ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            results = detect_objects(image)
            output_img, damage_detected = draw_results(image, results)
        
        st.image(output_img, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)

        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        if damage_detected:
            st.error(" **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã!**", icon="üö®")
        else:
            st.success(" **–õ–µ–Ω—Ç–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.**", icon="üü¢")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
if "show_model_info" not in st.session_state:
    st.session_state.show_model_info = False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
if st.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
    st.session_state.show_model_info = not st.session_state.show_model_info

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
if st.session_state.show_model_info:
    model_info = ModelInfo()
    info = model_info.info
    st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    for key, value in info.items():
        st.write(f"**{key}**: {value}")
