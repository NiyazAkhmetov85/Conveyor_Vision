import streamlit as st
import numpy as np
from ultralytics import YOLO
from PIL import Image, ImageDraw, ImageFont
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(page_title="Conveyor Vision", layout="centered")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
MODEL_PATH = "runs/detect/train5/weights/best.pt"  # –£–∫–∞–∂–∏ –ø—É—Ç—å, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ª–µ–∂–∏—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
model = YOLO(MODEL_PATH)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ YOLO
def detect_objects(image):
    results = model(image)
    return results

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ PIL
def draw_results_pil(image, results):
    img = image.copy().convert("RGB")
    draw = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    damage_detected = False

    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = box.conf[0].item()
            cls = int(box.cls[0].item())
            label = f"{model.names[cls]}: {conf:.2f}"

            if cls == 0:
                color = (255, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è "Bad"
                damage_detected = True
            else:
                color = (0, 255, 0)  # –ó–µ–ª—ë–Ω—ã–π –¥–ª—è "Good"

            draw.rectangle([x1, y1, x2, y2], outline=color, width=2)
            draw.text((x1, y1 - 10), label, fill=color, font=font)

    return img, damage_detected

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
st.title("üîç Conveyor Vision")
st.markdown("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫–æ–Ω–≤–µ–π–µ—Ä–Ω–æ–π –ª–µ–Ω—Ç—ã")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file)
    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            results = detect_objects(image)
            output_img, damage_detected = draw_results_pil(image, results)

        st.image(output_img, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç", use_container_width=True)

        if damage_detected:
            st.error("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã!")
        else:
            st.success("üü¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            output_img.save(tmp.name)
            st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", data=open(tmp.name, "rb"), file_name="result.png", mime="image/png")
            os.unlink(tmp.name)
